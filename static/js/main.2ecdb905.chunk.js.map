{"version":3,"sources":["Images/background.PNG","components/CV/image/cv1.PNG","components/CV/image/cv2.PNG","components/Projects/image/project1.PNG","components/Projects/image/project2.PNG","components/AboutME/image/aboutme1.PNG","components/AboutME/image/aboutme2.PNG","components/CV/CV.js","components/Projects/Projects.js","components/AboutME/aboutme.js","components/MyIcon/MyIcon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CV","className","src","cv1","alt","cv2","Projects","project1","project2","aboutme","aboutme1","aboutme2","MyIcon","link","library","iconName","href","current","icon","size","add","fab","far","App","githubRef","useRef","linkedInRef","emailRef","background","Tabs","defaultActiveKey","id","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,0UCc5BC,EATJ,WACP,OACI,yBAAKC,UAAU,MACX,yBAAKA,UAAU,aAAaC,IAAKC,IAAKC,IAAI,KAC1C,yBAAKH,UAAU,aAAaC,IAAKG,IAAKD,IAAI,O,kCCKvCE,EATE,WACb,OACI,6BACI,yBAAKL,UAAU,aAAaC,IAAKK,IAAUH,IAAI,KAC/C,yBAAKH,UAAU,aAAaC,IAAKM,IAAUJ,IAAI,O,0CCK5CK,EATC,WACZ,OACI,yBAAKR,UAAU,WACX,yBAAKA,UAAU,aAAaC,IAAKQ,IAAUN,IAAI,KAC/C,yBAAKH,UAAU,aAAaC,IAAKS,IAAUP,IAAI,O,QCG5CQ,G,MARA,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAC5B,OACA,uBAAGd,UAAU,eAAee,KAAMH,EAAKI,SACvC,kBAAC,IAAD,CAAiBC,KAAM,CAACJ,EAASC,GAAWI,KAAK,U,MCQrDL,IAAQM,IACNC,IACAC,KAGF,IA+BeC,EA/BH,WAEV,IAAMC,EAAYC,iBAAO,8BACnBC,EAAcD,iBAAO,iDACrBE,EAAWF,iBAAO,0CAExB,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,aAAaC,IAAK0B,IAAYxB,IAAI,KACjD,yBAAKH,UAAU,SACb,kBAAC,EAAD,CAAQY,KAAMa,EAAaZ,QAAQ,MAAMC,SAAS,aAClD,kBAAC,EAAD,CAAQF,KAAMW,EAAWV,QAAQ,MAAMC,SAAS,WAChD,kBAAC,EAAD,CAAQF,KAAMc,EAAUb,QAAQ,MAAMC,SAAS,cAEjD,yBAAKd,UAAU,YACb,kBAAC4B,EAAA,EAAD,CAAMC,iBAAiB,KAAKC,GAAG,iBAC7B,kBAACC,EAAA,EAAD,CAAKC,SAAS,KAAKC,MAAM,MACvB,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,SAC5B,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YAC7B,kBAAC,EAAD,WC/BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ecdb905.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.56204edd.PNG\";","module.exports = __webpack_public_path__ + \"static/media/cv1.f0fb6396.PNG\";","module.exports = __webpack_public_path__ + \"static/media/cv2.cd0c72f1.PNG\";","module.exports = __webpack_public_path__ + \"static/media/project1.a8203db3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/project2.7e8e485c.PNG\";","module.exports = __webpack_public_path__ + \"static/media/aboutme1.8a728b63.PNG\";","module.exports = __webpack_public_path__ + \"static/media/aboutme2.31db5b79.PNG\";","import React from 'react'\r\nimport \"./CV.css\"\r\nimport cv1 from \"./image/cv1.PNG\"\r\nimport cv2 from \"./image/cv2.PNG\"\r\n\r\nconst CV = () => {\r\n    return (\r\n        <div className=\"CV\">\r\n            <img className=\"background\" src={cv1} alt=\"\" />\r\n            <img className=\"background\" src={cv2} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CV","import React from 'react'\r\nimport project1 from \"./image/project1.PNG\"\r\nimport project2 from \"./image/project2.PNG\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div>\r\n            <img className=\"background\" src={project1} alt=\"\" />\r\n            <img className=\"background\" src={project2} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects","import React from 'react'\r\nimport \"./aboutme.css\"\r\nimport aboutme1 from \"./image/aboutme1.PNG\"\r\nimport aboutme2 from \"./image/aboutme2.PNG\"\r\n\r\nconst aboutme = () => {\r\n    return (\r\n        <div className=\"aboutme\">\r\n            <img className=\"background\" src={aboutme1} alt=\"\" />\r\n            <img className=\"background\" src={aboutme2} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default aboutme","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport './MyIcon.css'\r\n\r\nconst MyIcon = ({link, library, iconName}) => {\r\n    return (\r\n    <a className=\"social-icons\" href={link.current}>\r\n    <FontAwesomeIcon icon={[library, iconName]} size=\"2x\"/>\r\n    </a>\r\n    )\r\n}\r\n\r\nexport default MyIcon","import React, { useRef } from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { far } from '@fortawesome/free-regular-svg-icons'\r\nimport background from \"./Images/background.PNG\"\r\nimport Tabs from \"react-bootstrap/Tabs\"\r\nimport Tab from \"react-bootstrap/Tab\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CV from './components/CV/CV';\r\nimport Projects from './components/Projects/Projects';\r\nimport About from './components/AboutME/aboutme';\r\nimport MyIcon from './components/MyIcon/MyIcon';\r\nimport './App.css';\r\n\r\n\r\nlibrary.add(\r\n  fab,\r\n  far\r\n)\r\n\r\nconst App = () => {\r\n\r\n  const githubRef = useRef(\"https://github.com/kyjauna\")\r\n  const linkedInRef = useRef(\"https://www.linkedin.com/in/kyjauna-marshall/\")\r\n  const emailRef = useRef(\"mailto:kyjauna.marshall@mail.mcgill.ca\")\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img className=\"background\" src={background} alt=\"\" />\r\n      <div className=\"icons\">\r\n        <MyIcon link={linkedInRef} library=\"fab\" iconName=\"linkedin\" />\r\n        <MyIcon link={githubRef} library=\"fab\" iconName=\"github\" />\r\n        <MyIcon link={emailRef} library=\"far\" iconName=\"envelope\" />\r\n      </div>\r\n      <div className=\"tabs-div\">\r\n        <Tabs defaultActiveKey=\"CV\" id=\"main-nav-tabs\">\r\n          <Tab eventKey=\"CV\" title=\"CV\">\r\n            <CV />\r\n          </Tab>\r\n          <Tab eventKey=\"aboutme\" title=\"About\">\r\n            <About />\r\n          </Tab>\r\n          <Tab eventKey=\"projects\" title=\"Projects\">\r\n            <Projects />\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}